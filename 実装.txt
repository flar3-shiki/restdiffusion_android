### プロジェクト「SDWebUI Remote」の現状と仕様

**概要**

このアプリケーションは、ローカルネットワーク上の「Stable Diffusion WebUI」に接続し、テキストや画像からの画像生成をリモートで行うためのAndroidクライアントです。MVVMアーキテクチャを採用し、Jetpack ComposeとMaterial 3でUIが構築されています。

**主要機能**

1.  **接続フロー:**
    *   アプリ起動時、メイン画面には「Connect to Server」ボタンが表示されます。
    *   ボタンを押すと、設定されたAPIエンドポイントの`/sdapi/v1/samplers`、`/sdapi/v1/sd-models`、`/sdapi/v1/loras`、`/sdapi/v1/sd-vae`、`/sdapi/v1/embeddings` エンドポイントに並行してアクセスし、接続を試みます。
    *   接続処理中は「Cancel」ボタンが表示され、ユーザーはいつでも接続を中断できます。
    *   接続状態��接続中、成功、失敗）はUIにフィードバックされます。
    *   **堅牢なエラーハンドリング:** 接続に失敗した場合、原因（サーバーが見つからない、接続拒否、タイムアウト、認証失敗など）に応じた具体的なエラーメッセージが表示され、ユーザーが対処しやすくなっています。**これらのメッセージは国際化を考慮し、`strings.xml`で管理されています。**

2.  **画像生成:**
    *   APIサーバーへの接続が成功すると、画像生成画面が表示されます。
    *   **バックグラウンド生成:** メイン画面からの画像生成は、即座にバックグラウンドキューに追加され、Foreground Serviceによって実行されます。これにより、アプリを閉じても生成が中断されることはありません。
    *   **生成モード:**
        *   画面上部のタブで「Txt2Img」と「Img2Img」のモードを切り替えられます。
    *   **共通パラメータ:**
        *   **Model:** サーバーから取得したモデルのリストからドロップダウンで選択・変更で��ます。
        *   **VAE:** サーバーから取得したVAEのリストからドロップダウンで選択・変更できます。（デフォルトはAutomatic）
        *   **LoRA利用:**
            *   「Add LoRA」ボタンから、サーバー上のLoRAモデルを適用できます。
            *   選択した各LoRAの適用強度（ウェイト）をスライダーで個別に調整可能です。
            *   複数のLoRAを同時に利用できます。
        *   **Textual Inversion (Embedding) 利用:**
            *   「Add Embedding」ボタンから、サーバー上のEmbeddingの一覧をダイアログで表示します。
            *   一覧から選択すると、その名前がプロンプトの末尾に追記されます。
        *   **Prompt / Negative Prompt:** それぞれ自由入力。
        *   **Steps / CFG Scale:** スライダーで設定。
        *   **Width / Height:** スライダーと数値入力フィールドが連動。
        *   **Batch Count / Batch Size:** 「+」「-」ボタンと数値入力フィールドで設定（デフォルトは各1）。
        *   **Sampler:** サーバーから取���したリストからのドロップダウン選択。
        *   **Seed:** 数値で直接指定、または「ランダム（-1）」を選択可能。
    *   **Img2Img専用パラメータ:**
        *   **Initial Image:** 「Select Image」ボタンから、画像生成のベースとなる画像を端末から選択できます。
        *   **Denoising Strength:** 元画像からどの程度変更を加えるかをスライダーで設定します。
        *   **インペインティング (New!):**
            *   ベース画像の上に、指でドラッグして修正したい領域をマスク（塗りつぶし）できます。
            *   ブラシのサイズはスライダーで調整可能です。
            *   「Clear Mask」ボタンでマスクをリセットできます。
            *   マスクが存在する場合、APIにはその情報が送られ、マスクされた部分のみが再生成されます。

3.  **キュー機能:**
    *   画像生成画面の「Add to Queue」ボタンから、現在のパラメータを生成タスク（ジョブ）としてキューに追加できます。
    *   サイドバーの「Queue」画面から、追加したジョブの一覧を確認できます。
    *   **ジョブ管理:**
        *   各ジョブの削除や、キュー全体のクリアが可能です。
        *   **実行中タスク以降のキャンセル:** 「Cancel Subsequent」ボタンを押すと、現在実行中のタスク以降の待機中タスクをすべて削除できます。このボタンは実行中のタスクがある時のみ有効です。
        *   **ドラッグ＆ドロップによる並び替え:** ジョブを長押しして掴み、直感的に実行順序を変更できます。
    *   **バックグラウンド実行:**
        *   「Start」ボタンを押す、またはメイン画面で「Generate」ボタンを押すと、Foreground Serviceが起動し、キュー内のジョブを順番に自動で実行します。
        *   アプリがバックグラウンド状態になっても処理は継続され、OSの通知で進捗が確認できます。
        *   生成された画像は、自動的に「履歴」にも保存されます。

4.  **プリセット機能:**
    *   画像生成画面のトップバーにある三点リーダ���メニューから、現在の生成パラメータを「プリセット」として保存できます。
    *   保存時には、プリセットに名前を付け、どのパラメータを保存に含めるかを選択できます。
    *   メニューから「Load Preset」を選択すると、保存済みのプリセット一覧がダイアログで表示され、適用・削除が可能です。

5.  **プロンプトスタイル機能:**
    *   よく使うプロンプトやネガティブプロンプトの断片を「スタイル」として保存できます。
    *   設定画面からスタイルの追加・編集・削除が可能です。
    *   画像生成画面の「Apply Style」ボタンから、保存したスタイルを現在のプロンプトに追記できます。

6.  **進捗確認と通知:**
    *   **サービスによる進捗通知:** 画像生成中の進捗は、`QueueExecutionService`が`/sdapi/v1/progress`エンドポイントをポーリングし、OSの通知センターにプログレスバー付きで詳細に表示します（例：「キュー: 生成中...」「prompt - 95% (19/20)」）。
    *   **中断機能:** OS���通知やQueue画面から、実行中の生成処理を中断（interrupt）させることができます。
    *   生成の開始、完了、失敗時にも、それぞれ通知が発行されます。
    *   通知をタップすると、アプリ本体が起動・表示されます。

7.  **履歴機能:**
    *   サイドバーから「履歴」画面に遷移できます。
    *   **検索とフィルター:** プロンプトのキーワードによる検索と、生成に使用したモデルによるフィルタリングが可能です。
    *   **削除:** 各履歴アイテムを個別に削除できます。
    *   **お気に入り:**
        *   各履歴アイテムに「お気に入り」（星マーク）を付けることができます。
        *   サイドバーの「Favorites」から、お気に入りに登録したアイテムだけを一覧表示する専用画面に遷移できます。
    *   過去に生成した画像のサムネイルとプロンプトが一覧表示されます。
    *   表示モードをリスト形式とグリッド形式で切り替え可能です。
    *   一覧をタップすると「履歴詳細��画面に遷移し、生成された画像と、その際に使用した全パラメータを確認できます。

(以降の「主要機能」セクションは変更なし)

...

**技術スタック**

(変更なし)

---

### 主要なコード実装

#### 1. 状態管理 (ViewModel & UI State)

*   **`MainViewModel.kt`:**
    *   UIの状態、ユーザー入力パラメータ、そしてサーバーから取得した**VAEとEmbeddingのリスト**を`StateFlow`で管理します。
    *   **`connect()`:** APIサーバーへの接続時に、モデル、サンプラー、LoRAに加え、**VAEとEmbeddingのリスト**も並行して取得します。
    *   **`generateImage()`:** 現在の生成パラメータ（**選択されたVAEを含む**）から`QueueItem`を作成し、`QueueExecutionService`を起動します。
    *   **`applyEmbedding()`:** 選択されたEmbeddingの名前をプロンプトに追記する関数を追加しました。
*   **`QueueViewModel.kt`:**
    *   **`interruptGeneration()`:** 実行中の生成を中断させるAPIを呼び出す関数を追加しました。
    *   **`cancelSubsequent()`:** 実行中タスク���降の待機中タスクをすべて削除する処理を呼び出す関数を追加しました。
*   **`HistoryViewModel.kt`:**
    *   履歴画面のビジネスロジックを`MainViewModel`から分離するために新規作成されました。
    *   検索クエリ、モデルフィルターの状態を`StateFlow`で管理します。
    *   履歴アイテムとお気に入りアイテムのリストをRoomから取得し、UIに公開します。
    *   アイテムの削除、お気に入り状態のトグルを行う関数を提供します。

#### 2. API通信 (Retrofit & OkHttp)

*   **`StableDiffusionApiService.kt`:** `/sdapi/v1/sd-vae`, `/sdapi/v1/embeddings`, `/sdapi/v1/interrupt` の各エンドポイントを新たに追加しました。
*   **`Vae.kt`, `EmbeddingsResponse.kt`:** VAEとEmbeddingのAPIレスポンスに対応するデータクラスを新規作成しました。

#### 3. データベースと設定保存 (Room & DataStore)

*   **`AppDatabase.kt`:** `HistoryItem`と`QueueItem`エンティティのスキーマ変更に伴い、**データベースのバージョンを9に更新**しました。マイグレーションは`fallbackToDestructiveMigration()`に設定されています。
*   **`HistoryDao.kt`:**
    *   `HistoryItem`に`modelName`と`isFavorite`カラムを追加しました。
    *   検索・フィルターに対応した`getHistory()`、お気に入りのみを取得する`getFavorites()`、お気に入り状態を更新する`setFavorite()`などのクエリを追加しました。
*   **`QueueDao.kt`:** 実行中タスク以降の待機中タスクを削除する`deleteWaitingAfterProcessing()`クエリを追加しました。
*   **`QueueItem.kt`:** エンティティに、選択されたVAE名を保存するための`vae: String?`フィールドを追加しました。

#### 4. UIコンポーネントと画面遷移 (リファクタリング済)

*   **`HistoryScreen.kt`:**
    *   `HistoryViewModel`を使用するよう全面的にリファクタリングされました。
    *   画面上部に検索ボックスとモデル選択のドロップダウンを（縦並びで）追加しました。
    *   各履歴アイテムに削除ボタンとお気に入りボタンを追加しました。
*   **`FavoritesScreen.kt`:**
    *   お気に入りアイテムの���を一覧表示する画面として新規作成されました。
*   **`HistoryDetailScreen.kt`:**
    *   `HistoryViewModel`を参照するようになり、お気に入り状態のトグルボタンをAppBarに追加しました。
*   **`GenerationScreen.kt`:**
    *   モデル選択の下に、**VAEを選択するためのドロップダウンメニューを追加**しました。
    *   プロンプト入力欄の下に、**Embedding選択ダイアログを開くための「Add Embedding」ボタンを追加**しました。
*   **`QueueScreen.kt`:**
    *   ボタン増加による表示崩れを解消するため、アクションボタン群をTopAppBarから、タイトル下の独立した`Row`に移動しました。
    *   「Interrupt」ボタンを追加しました。
*   **`Dialogs.kt`:**
    *   利用可能なEmbeddingを一覧表示し、選択したものをプロンプトに追加する**`EmbeddingSelectionDialog`を新規作成**しました。
*   **`AppRoot.kt` & `Screen.kt`:**
    *   `FavoritesScreen`へのナビゲーションルートを追加しました。

#### 5. バックグラウンド処理 (Service)

*   **`QueueExecutionService.kt`:**
    *   画像生成リクエストを組み立てる際に、`QueueItem`に保存された**VAEの情報を`override_settings`に含める**よう修正しました。
    *   生成完了時に`HistoryItem`を保存する際、**モデル名も記録する**よう修正しました。

(以降のセクションは変更なし)